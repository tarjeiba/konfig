#+TITLE: Konfigurasjonsfil for Emacs

* Pakkehåndtering
#+BEGIN_SRC emacs-lisp
(package-initialize)
(require 'package)
(setq package-archives
      '(
	("melpa" . "https://melpa.org/packages/")
	("gnu" . "https://elpa.gnu.org/packages/")
	("org" . "http://orgmode.org/elpa/")))

(unless package-archive-contents
 (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(setq use-package-compute-statistics t)
#+END_SRC

* Platformer
** PC-spesifikt
#+BEGIN_SRC emacs-lisp
(defun taba-computer-init ()
  "Init specific for a computer."
  (defconst org-journal-dir "~/journal")
  (defconst org-journal-file (concat org-journal-dir "/journal.org"))
  (defconst org-todo-file (concat org-journal-dir "/gjøremål.org"))
  (defconst work-dir "~/jobb")
  (defconst repo-dir "~/repos")
  (defconst promo-org-dir (concat repo-dir "/promo/org"))
  (defconst promo-pub-dir (concat repo-dir "/promo"))
  (defconst subject-dir (concat work-dir "/fagmateriell/org"))
  (defconst org-promo-todo-file (concat  promo-org-dir "/promo.org"))
  (scroll-bar-mode -1)
  (setq-default fill-column 100)
  (setq-default org-tags-column (+ (- fill-column) 6))

 )
#+END_SRC

** Mobilspesifikt
#+BEGIN_SRC emacs-lisp
(defun taba-tablet-init ()
  "Init specific for a phone or tablet."
  (defconst subject-dir "~/storage/shared/dropsync")
  (defconst tefo-dir (concat subject-dir "/tefo"))
  (setq mode-line-format -1)
  (setq-default fill-column 60)
  (setq org-tags-column (+ (- fill-column) 3)))
#+END_SRC

** Platformvalg
#+BEGIN_SRC emacs-lisp
  (cond
   ((string-equal system-type "windows-nt")
    (taba-computer-init)))
#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t
  :bind (("C-c l" . org-store-link)
	 ("C-c c" . org-capture)
	 ("C-c a" . org-agenda)
	 ("C-c b" . org-iswitchb))
  :config 
  (progn
    (require 'ob-ipython)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (ipython . t)
       (dot . t)
       (ditaa . t)
       (C . t)
       (emacs-lisp . t)
       (latex . t)))

    (setq org-capture-templates
	  '(("a" "Avtale" entry
	     (file+headline (concat org-journal-dir "/gjøremål.org") "Avtaler")
	     "* %^{Avtale} %^G\n%^T\n%?\n" :empty-lines 1 :immediate-finish t)
	    ("g" "Gjøremål" entry
	     (file+headline org-todo-file "Gjøremål")
	     "* TODO %^{Gjøremål}\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t (taba-time-schedule current-prefix-arg)))\n%?"
	     :empty-lines 1)
	    ("j" "Journal" entry
	     (file+datetree org-journal-file)
	     "* %<%H:%M> %^g\n%?\n  %i\n" :empty-lines 1)
	    ("d" "Dagbok" entry
	     (file+olp org-journal-file "Dagbok")
	     "* %<%d.%m.%Y>\n%?\n" :empty-lines 1)
	    ("p" "Promo" entry
	     (file+headline org-promo-todo-file "Gjøremål")
	     "* TODO %^{Gjøremål}\n%a\n%?\n%<%Y%m%d %R>\n" :empty-lines 1 :immediate-finish t)
	    ))

    (org-link-set-parameters
     "popup"
     :follow (lambda (path)
	       (message (format "%s" path)))
     :export (lambda (path desc backend)
	       (cond
		((eq backend 'html)
		 (format (concat "<span class=\"popup\""
				 "onclick=\"myPopupFunction()\">%s"
				 "<span class=\"popuptext\" "
				 "id=\"myPopup\">%s</span></span>")
			 (or desc path) path)))))

    (org-link-set-parameters
     "fig"
     :follow (lambda (path)
	       (org-open-file-with-emacs
		(format "../figurer/%s" path)))
     :export (lambda (path desc backend)
	       (cond
		((eq backend 'html)
		 (format (concat "<img src=\"figurer/%s\""
				 " alt=\"%s\"/>")
			 path (or desc path))))))

    (setq org-src-tab-acts-natively t
	  org-edit-src-content-indentation 0
	  org-src-fontify-natively t
	  org-export-coding-system 'utf-8
	  org-html-postamble nil
	  org-image-actual-width nil
	  org-list-allow-alphabetical t)

    (setq holiday-bahai-holidays nil
	  holiday-hebrew-holidays nil
	  holiday-islamic-holidays nil
	  holiday-oriental-holidays nil
	  holiday-other-holidays nil
	  holiday-local-holidays nil
	  holiday-christian-holidays nil
	  holiday-general-holidays nil
	  holiday-solar-holidays nil)

    (setq org-todo-keywords
	  '((sequence "TODO" "|" "DONE")
	    (sequence "." "PLANLAGT" "|" "AVHOLDT")
	    (sequence "|" "CANCELED")))

    (setq org-agenda-custom-commands
	  '(("h" "Agenda og hjemme"
	     ((agenda "" ((org-agenda-span 14)
			  (org-deadline-warning-days 14)
			  (org-agenda-prefix-format "")
			  (org-agenda-filter-preset '("-jobb"))))))
	    ("j" "Jobb i dag og i morra"
	     ((agenda "" ((org-agenda-span 2)
			  (org-agenda-filter-preset '("+jobb"))
			  (org-agenda-prefix-format "%t ")))
	      (todo "TODO" ((org-agenda-filter-preset '("+jobb"))
			    (org-agenda-max-entries 0)))))))



    (setq org-agenda-include-diary t
	  org-agenda-skip-deadline-if-done t
	  org-agenda-skip-scheduled-if-done t
	  org-agenda-skip-timestamp-if-done t
	  org-agenda-window-setup '(current-window)
	  org-src-window-setup '(current-window)
	  org-startup-indented t
	  org-agenda-files (mapcar (lambda (x) (concat org-journal-dir "/" x)) '("journal.org" "gjøremål.org" "møter.org")))

    (add-to-list 'org-modules 'org-habit)

    (setq org-refile-targets '((nil :maxlevel . 2)
			       ;; all top-level headlines in the
			       ;; current buffer are used as targets first
			       ;; as a refile target
			       (org-agenda-files :maxlevel . 2)))

    (setq org-refile-use-outline-path 'file)


    (setq org-startup-indented t)
    (add-hook 'org-mode-hook 'visual-line-mode)
    (add-hook 'org-mode-hook 'visual-fill-column-mode)
    (add-hook 'org-capture-mode-hook 'delete-other-windows)
    (add-hook 'org-trigger-hook 'taba-write-journal-on-todo)


    (defun taba-org-mode-hook ()
      "Org level heading scaling."
      (dolist (face '(org-level-1
		      org-level-2
		      org-level-3
		      org-level-4
		      org-level-5))
	(set-face-attribute face nil :weight 'semi-bold :height 1.0)))
    (add-hook 'org-mode-hook 'taba-org-mode-hook)



    (defun taba-org-screenshot (arg)
      "Take a screenshot into a time stamped unique-named file in the
	    same directory as the org-buffer and insert a link to this file."
      (interactive "P")
      (setq folder "../figurer/")
      (if arg
	  (setq filename (concat folder (read-string "Bildenavn: ") ".png"))
      (setq filename (concat "../figurer/" (file-name-base buffer-file-name) "_" (format-time-string "%Y%m%d_%H%M%S") ".png")))


      (message filename)
      (if (eq system-type 'windows-nt)
	  (call-process "boxcutter" nil nil nil filename)) ; forutsetter boxcutter http://keepnote.org/boxcutter/
      (if (eq system-type 'gnu/linux)
	  (call-process "import" nil nil nil filename))

      ;; (if arg
      ;; 	  (let ((html-filename (concat "./figurer/" (file-name-base buffer-file-name) "_" (format-time-string "%Y%m%d_%H%M%S") ".html")))
      ;; 	    (insert (concat "#+INCLUDE: " html-filename " html"))
      ;; 	    (with-temp-file html-filename
      ;; 	      (taba-insert-encoded-image-link filename)
      ;; 	      (taba-remove-newlines)))
      ;; 	(insert (concat "[[file:" filename "]]")))
)

    (add-to-list 'org-structure-template-alist
		 (list "sp" "#+BEGIN_SRC ipython\n?\n#+END_SRC\n"))
    (add-to-list 'org-structure-template-alist
		 (list "se" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC\n"))    
    (add-to-list 'org-structure-template-alist
		 (list "ii" (concat "#+ATTR_HTML: :width 100% :heigh 100%\n"
				    "[[./figurer/?]]")))
    (add-to-list 'org-structure-template-alist
		 (list "ll" (concat
			     "#+html: <input type=\"button\" onclick=\"return toggleMe('special1')\" value=\"løsning\"><br><br>\n"
			     "#+attr_html: :id special1 :style display:none;border:1px solid black\n"
			     "#+begin_div\n?\n#+end_div")))
    (add-to-list 'org-structure-template-alist
		 (list "rfa" "#+ATTR_REVEAL: :frag appear"))
    (add-to-list 'org-structure-template-alist
		 (list "rfA" "#+ATTR_REVEAL: :frag (appear)"))
    (add-to-list 'org-structure-template-alist
		 (list "rfa" "#+ATTR_REVEAL: :frag appear"))
    (add-to-list 'org-structure-template-alist
		 (list "rs" "#+REVEAL: split"))
    (add-to-list 'org-structure-template-alist
		 (list "t" "#+BEGIN_TASK\n?\n#+END_TASK"))
    ))
  #+END_SRC

** Reveal
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
  :after org
  :config
  (progn
    (setq org-reveal-title-slide "<h1>%t</h1>")
    (setq org-reveal-root "https://cdn.jsdelivr.net/reveal.js/3.0.0/")
    ))

(use-package org-habit
  :after org)
(use-package ox-publish
  :after org)

#+END_SRC
* Oppstartsalternativer og misc

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(recentf-mode 1)
(setq recentf-max-menu-items 25)
 (prefer-coding-system 'utf-8)
(add-hook 'emacs-startup-hook 'toggle-frame-fullscreen)
(setq inhibit-startup-screen t)
(setq inhibit-splash-screen t)
(setq initial-scratch-message nil)
(menu-bar-mode -1)
(tool-bar-mode -1)
(display-time-mode 1)
(powerline-vim-theme)
(set-face-font 'default "Source Code Pro")
(defalias 'yes-or-no-p 'y-or-n-p)
;; (global-set-key (kbd "C-h C-f") 'find-function)
(setq debug-on-error t)
#+END_SRC

Paredit har jeg ikke klart å bli venn med, så kommenterer ut dette inntil videre.

#+BEGIN_SRC emacs-lisp
;; (use-package paredit
;;   :ensure t
;;   :config
;;   (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package hungry-delete
  :ensure t
  :config (hungry-delete-mode t))

(use-package try
  :ensure t)
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status)
    :config (setenv "GIT_ASKPASS" "git-gui--askpass"))
#+END_SRC

* Klasserommet
#+BEGIN_SRC emacs-lisp
(defun randomize-string (string)
  "Randomize a string."
  (interactive "sString: ")
  (let ((i 0)
	(char " ")
	(size (string-width string)))
    (while (< i size)
      (let ((j (random size)))
	(store-substring char 0 (substring string i (+ 1 i)))
	(store-substring string i (substring string j (+ 1 j)))
	(store-substring string j char)
	(setq i (+ 1 i))))
    string))

(defun randomize-string-at-point ()
  "Randomize the word (or region) at point."
  (interactive)
  (let* ((bounds (if (use-region-p)
		     (cons (region-beginning) (region-end))
		   (bounds-of-thing-at-point 'symbol)))
	 (text (buffer-substring-no-properties (car bounds) (cdr bounds))))
    (when bounds
      (delete-region (car bounds) (cdr bounds))
      (insert (randomize-string text)))))

(defun randomize-region (beg end &optional reg)
  "Randomize the order of words in region."
  (interactive "*r")
  (if (eq reg nil)
      (progn
	(setq reg "\\w")
	(setq regbound "\\b"))
    (progn
      (setq reg "^.*$")
      (setq regbound "^")))
  (let ((all (mapcar
	      (lambda (w) (if (string-match reg w)
			      ;; Randomize words
			      (cons (random) w)
			    ;; keep everything else in order.
			    (cons -1 w)))
	      (split-string
	       (delete-and-extract-region beg end) regbound)))
	words sorted)
    (mapc (lambda (x)
	    ;; Words are numbered >= 0.
	    (unless (> 0 (car x))
	      (setq words (cons x words))))
	  all)
    ;; Random sort!
    (setq sorted (sort words
		       (lambda (a b) (< (car a) (car b)))))
    (mapc
     'insert
     ;; Insert using original list, `all',
     ;; but pull *words* from randomly-sorted list, `sorted'.
     (mapcar (lambda (x)
	       (if (> 0 (car x))
		   (cdr x)
		 (prog1 (cdar sorted)
		   (setq sorted (cdr sorted)))))
	     all))))

;; Det følgende er hentet fra
;; https://stackoverflow.com/questions/6532898/is-there-a-apply-function-to-region-lines-in-emacs

(defun apply-function-to-region-lines (fn)
  (interactive "aFunction to apply yo lines in region: ")
  (save-excursion
    (goto-char (region-end))
    (let ((end-marker (copy-marker (point-marker)))
	  next-line-marker)
      (goto-char (region-beginning))
      (if (not (bolp))
	  (forward-line 1))
      (setq next-line-marker (point-marker))
      (while (< next-line-marker end-marker)
	(let ((start nil)
	      (end nil))
	  (goto-char next-line-marker)
	  (save-excursion
	    (setq start (point))
	    (forward-line 1)
	    (set-marker next-line-marker (point))
	    (setq end (point)))
	  (save-excursion
	    (let ((mark-active nil))
	      (narrow-to-region start end)
	      (funcall fn)
	      (widen)))))
      (set-marker end-marker nil)
      (set-marker next-line-marker nil))))

(defun number-of-groups (n size)
  "Divide n students into groups of size `size',
no groups with fewer than size - 1 students."
  (let ((groups '())
	(ngroups (ceiling n size))
	(nsmall))
    (if (zerop (mod n size))
	(progn
	  (dotimes (i ngroups)
	    (setq groups (cons size groups))))
      (progn
    	(setq nsmall (- size (mod n size)))
	(dotimes (i nsmall)
	  (setq groups (cons (1- size) groups)))
	(dotimes (i (- ngroups nsmall))
	  (setq groups (cons size groups)))))
    groups))

(defun remove-empty-lines (beg end)
  "Remove empty lines from region."
  (interactive "*r")
  (flush-lines "^\s-*$" beg end))

(defun group-region (beg end &optional group-size)
  "Insert newline and group heading for
the lines in the region."
  (interactive "*r")
  (if (eq group-size nil)
      (setq group-size 4))
  (flush-lines "^$" beg end)
  (let ((groups-list (number-of-groups (count-lines beg end) group-size)))
    (goto-char beg)
    (previous-line)
    (dotimes (i (length groups-list))
      (next-line (car groups-list))
      (move-end-of-line 1)
      (newline)
      (setq groups-list (cdr groups-list)))))

(defun randomize-and-group-region (beg end &optional group-size)
  (interactive "*r")
  (if (eq group-size nil)
      (setq group-size 4))
  (randomize-region beg end t)
  (group-region beg end group-size))

(defun taba-randomize-and-htmlize-at-point ()
  "Upcase word and randomize and make it centered in the html export."
  (interactive)
  (let ((html-prefix "#+ATTR_HTML: :align center"))
    (save-excursion
      (randomize-string-at-point)
      (beginning-of-line)
      (upcase-word 1)
      (beginning-of-line)
      (insert html-prefix)
      (newline))))
#+END_SRC

* Rot
#+BEGIN_SRC emacs-lisp
(defconst week-one "2017-02-01")

(defconst malfil (expand-file-name (concat work-dir "/maler/timemal.org")))

(defun taba-org-title ()
  "Return the title of the current org-mode buffer."
  (car (plist-get (org-export-get-environment) ':title)))


(defun taba-insert-timestamp-day-weeknumber (week)
  (interactive "P")
  (org-read-date nil nil (format "++%sw monday" week) nil (org-time-string-to-time "2017-01-01")))

(setq calendar-week-start-day 1
      calendar-day-name-array ["søndag" "mandag" "tirsdag" "onsdag" "torsdag" "fredag" "lørdag"]
      calendar-month-name-array ["januar" "februar" "mars" "april"
                                 "mai" "juni" "juli" "august"
                                 "september" "oktober" "november" "desember"])

(defun taba-time-schedule (arg)
  (interactive "P")
  (if (eq arg nil)
      (message "+0d")
    (message "+%sd" arg)))

(defun taba-week ()
  (interactive)
  (message (format-time-string "%W")))


(defun taba-prompt-for-time-string ()
  (org-time-string-to-time (org-read-date)))

(defun taba-time-mal ()
  (let* ((org-date (org-read-date))
	 (date-string (org-time-string-to-time org-date))
	 (week (format-time-string "%W" date-string))
	 (weekday (format-time-string "%A" date-string))
	 (weekday-abbr (format-time-string "%a" date-string))
	 (malfil (expand-file-name (concat work-dir "/maler/timemal.org"))))
    (with-temp-buffer
      (insert-file-contents malfil)
      (replace-string "{WEEK}" week nil (point-min) (point-max))
      (replace-string "{FAG}" (read-string "Fag: ") nil (point-min) (point-max))
      (replace-string "{WEEKDAY}" weekday nil (point-min) (point-max))
      (replace-string "{DATESTAMP}" (concat "<" org-date " " weekday-abbr ">") nil (point-min) (point-max))
      (buffer-string))))

(defun taba-shift-to-next-week ()
  (interactive)
  (org-clone-subtree-with-time-shift 1 "+1w")
  (org-archive-subtree-default))

(defun return-file-contents (filePath)
  "Return the contents of file filePath."
  (with-temp-buffer
    (insert-file-contents filePath)
    (buffer-string)))

;; Det følgende henter reveal.js fra "sandbox.hackinghistory.ca, TODO å endre

(defun taba-org-reveal-publish-to-html (plist filename pub-dir)
  "Publish an org file to reveal.js HTML Presentation.
FILENAME is the filename of the Org file to be published.  PLIST
is the property list for the given project.  PUB-DIR is the
publishing directory. Returns output file name."
  (let ((org-deck-base-url "http://sandbox.hackinghistory.ca/Tools/deck.js/")
        (org-reveal-root "http://sandbox.hackinghistory.ca/Tools/reveal.js/")
        (org-reveal-extra-css "http://sandbox.hackinghistory.ca/Tools/reveal.js/css/local.css"))
    (org-publish-org-to 'reveal filename ".html" plist pub-dir)))


(setq org-publish-project-alist
      `(("konturer-notes"
	 :base-directory ,(concat work-dir "/fagmateriell/org")
	 :base-extension "org"
	 :publishing-directory ,(concat work-dir "/fagmateriell/html")
	 :publishing-function org-html-publish-to-html
	 :recursive t
	 :headline-levels 4
	 :html-preamble konturer-preamble
	 :exclude "*/todo.org")
	("konturer-static"
	 :base-directory ,(concat work-dir "/fagmateriell/org")
	 :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|sww\\|gmbl\\|ggb\\|svg"
	 :publishing-directory ,(concat work-dir "/fagmateriell/html")
	 :recursive t
	 :publishing-function org-publish-attachment)
	("konturer-pres"
	 :base-directory ,(concat work-dir "/fagmateriell/org")
	 :base-extension "orgpres"
	 :publishing-directory ,(concat work-dir "/fagmateriell/html")
	 :recursive t
	 :publishing-function taba-org-reveal-publish-to-html)
	("konturer" 
	 :components ("konturer-notes" "konturer-static" "konturer-pres"))
	))

(add-to-list 'auto-mode-alist '("\\.orgpres\\'" . org-mode))

(defun taba-insert-week ()
  (interactive)
  (insert (format-time-string "%W")))

(defun taba-write-journal-on-todo (plist)
  "When todo state changes of item with :TRIGGER_DAGBOK: property,
run capture template."
  (when (org-element-property :TRIGGER_DAGBOK (org-element-at-point))
    (org-capture nil "d")))


(defun tob64 (filename)
  (base64-encode-string
   (with-temp-buffer
     (insert-file-contents filename)
     (buffer-string))))

(defun taba-remove-newlines ()
  (interactive)
  (save-excursion
    (beginning-of-buffer)
    (while (search-forward "\n" nil t)
      (replace-match "" nil t))))

(defun taba-remove-brackets ()
  (interactive)
  (save-excursion
    (beginning-of-buffer)
    (while (search-forward "&lt;" nil t)
      (replace-match "<" nil t))
    (beginning-of-buffer)
    (while (search-forward "&gt;" nil t)
      (replace-match ">" nil t))))

(defun taba-insert-encoded-image-link (filename)
  (insert (format "<img src=\"data:image/png;base64,%s\">"
		  (tob64 filename))))

;; Oppsett for å kunne bruke isearch for tingen under point
;; funnet https://nicolas.petton.fr/blog/index.html
(defun word-at-point ()
  (thing-at-point 'word))

(defun current-thing ()
  "Return the current \"thing\":
- if the region is active, return the region's text and deactivate the mark.
- else return the symbol at point or the empty string."
  (let ((thing (if (region-active-p)
		   (buffer-substring (region-beginning) (region-end))
		 (word-at-point))))
    (deactivate-mark)
    thing))

(defun isearch-thing ()
  "Search the current \"thing\":
- if the region is active, return the region's text and deactivate the mark.
- else return the symbol at point or the empty string."
  (interactive)
  (isearch-yank-string (current-thing)))

(define-key isearch-mode-map (kbd "C-t") #'isearch-thing)

(defun taba-list-tefo ()
  (interactive)
  (dired (concat subject-dir "/tefo")))
#+END_SRC

* Python
#+BEGIN_SRC emacs-lisp
(use-package python
  :ensure t
  :defer t
  :mode ("\\.py\\'" . python-mode))

(use-package company-jedi
  :ensure t
  :after python
  :init
  (add-hook 'python-mode-hook 'jedi:setup)
  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))
  (add-hook 'python-mode-hook 'my/python-mode-hook)
  (setq jedi:setup-keys t) ; optional
  (setq jedi:complete-on-dot t) ; optional
)

;; (use-package elpy
;;   :ensure t
;;   :after python
;;   :config (progn
;; 	    (elpy-enable)
;; 	    (setq elpy-rpc-backend "jedi")
;; 	    (setq elpy-rpc-python-command "python")
;; 	    (setq elpy-rpc-timeout nil)))
#+END_SRC

* Publish
* Dired
#+BEGIN_SRC emacs-lisp
(defun taba-dired-mode-setup ()
  "to be run as hook for `dired-mode'."
  (dired-hide-details-mode 1)) 		; kan skrus av/på med "("
(add-hook 'dired-mode-hook 'taba-dired-mode-setup)

(add-hook 'dired-load-hook '(lambda () (require 'dired-x)))
(setq dired-omit-mode t)
#+END_SRC

* Ido og Helm

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :init (setq helm-command-prefix-key "C-c h")
  :bind (("M-x" . helm-M-x)
	 ("C-x f" . helm-for-files)
	 ("C-x C-f" . helm-find-files))
  :config (progn
	    (setq helm-buffers-fuzzy-matching t)
	    (helm-mode 1)
	    ))
#+END_SRC

* Promo
I min mappestruktur, ligger ~promo~-repoet i en fellesmappe jeg har for alle git-repoene, under =~/repos=. Dette har jeg definert tidligere i init-fila, kommenter ut følgende linjer og tilpass det egen mappestruktur.

#+BEGIN_SRC emacs-lisp
;; (defconst repo-dir "~/repos")
;; (defconst promo-org-dir (concat repo-dir "/promo/org"))
;; (defconst promo-pub-dir (concat repo-dir "/promo"))
#+END_SRC

For at de følgende definisjonene skal gjelde, må =org= og =ox-publish= være lastet inn.

#+BEGIN_SRC emacs-lisp
(require 'org)
(require 'ox-publish)
#+END_SRC

Jeg lager to egendefinerte linktyper, tilgjengelig via vanlig org-mode-link-syntaks. =[[popup:tekst som skal poppes] [tekst som skal klikkes]]= (uten mellomrom i midten) og =[[fig:figurnavn.png] [alt-tekst]]= (uten mellomrom i midten). ~fig~-lenken er for å kunne holde alle figurer i en undermappe til der org-filene ligger, samtidig som jeg ønsker å kunne åpne figurfilene fra org-fila.

#+BEGIN_SRC emacs-lisp
(org-link-set-parameters
 "popup"
 :follow (lambda (path)
	   (message (format "%s" path)))
 :export (lambda (path desc backend)
	   (cond
	    ((eq backend 'html)
	     (format (concat "<span class=\"popup\""
			     "onclick=\"myPopupFunction()\">%s"
			     "<span class=\"popuptext\" "
			     "id=\"myPopup\">%s</span></span>")
		     (or desc path) path)))))

(org-link-set-parameters
 "fig"
 :follow (lambda (path)
	   (org-open-file-with-emacs
	    (format "../figurer/%s" path)))
 :export (lambda (path desc backend)
	   (cond
	    ((eq backend 'html)
	     (format (concat "<img src=\"figurer/%s\""
			     " alt=\"%s\"/>")
		     path (or desc path))))))
#+END_SRC

Her kommer muligheten for å velge dette som «prosjekt» når man trykker ~C-c C-e~.

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-publish-project-alist
	     `("promo"
	       :base-directory ,promo-org-dir
	       :base-extension "org"
	       :publishing-directory ,promo-pub-dir
	       :publishing-function org-html-publish-to-html
	       :recursive t
	       :headline-levels 4
	       :html-preamble nil
	       :auto-sitemap nil
	       :exclude "tanker-og-todos.org\\|orgheader.org\\|orgheader_nojs.org\\|sitemap.org"))
#+END_SRC

I utgangspunktet skal det være mulig å spesifisere ~sdepth~ via ~#+INFOJS_OPT: sdepth:1~, men det har jeg rett og slett ikke fått til å fungere.

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'ox-html
  (add-to-list 'org-html-infojs-options '(sdepth . "1"))
  (setq org-html-htmlize-output-type 'css)
  (setq org-html-use-infojs 'when-configured))
#+END_SRC

Tilsvarende, litt uelegant har jeg nå satt en litt «hackete» løsning for å få ~"q"~ til å åpne en ny spørsmåls-issue i github-repoet. *Merk: Skal dette fungere ordentlig, må du selv opprette «spørsmål» som en label i Github, dette skjer ikke automatisk.*

#+BEGIN_EXPORT html
<script type="text/javascript" language="JavaScript"> org_html_manager.set("BASE_URL_QUESTIONS", "https://github.com/tarjeiba/promo/issues/new/");</script>
#+END_EXPORT

* Evil                                                                              :noexport:
Dette kommer vel alltids inn en gang. Men ikke nå. Kanskje heller følge denne [[https://blog.aaronbieber.com/2016/01/23/living-in-evil.html][guiden (Aaron Bieber)]]?

